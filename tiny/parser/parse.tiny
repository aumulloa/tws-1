%%
Tiny       -> PROGRAM Name ':' Consts TypesRule Dclns Body Name '.' => "program";

TypesRule  -> TYPE (TypeRule ';')* 	     	    	=> "types"
	   -> 						=> "types";

TypeRule   -> Name EQ (Name | LitRule)		=> "type";

LitRule	   -> '('Name list ',' ')'			=> "lit";

Dclns      -> VAR (Dcln ';')*				=> "dclns"
           -> 					     	=> "dclns";

Dcln       -> Name list ',' ':' Name			=> "var";

Consts	   -> CONST (ConstDcln ';')*			=> "<consts>"
	   -> 						=> "<consts>";

ConstDcln  -> Name EQ ConstVals 			=> "const";
	   
ConstVals  -> INTEGER_NUM				=> "<integer>"
	   -> CHARACTER_ALPHA				=> "<char>"
	   -> Name;
	   					

Body       -> BEGINX Statement list ';' END      	=> "block";
Statement  -> Name ASSIGNMENT Expression          	=> "assign"
           -> OUTPUT '(' Expression list ',' ')'       	=> "output"
           -> IF Expression THEN Statement
                            (ELSE Statement)?       	=> "if"
           -> WHILE Expression DO Statement      	=> "while"
	   -> REPEAT Statement list ';' UNTIL Expression => "repeat"
	   -> LOOP Statement list ';' POOL    		=> "loop"
	   -> EXIT					=> "exit"
	   -> Primary EQSWAP Primary			=> "<swap>"
	   -> FOR Name ASSIGNMENT Expression TO Expression DO Statement => "<upto>"
	   -> FOR Name ASSIGNMENT Expression DOWNTO Expression DO Statement => "<downto>"
	   -> CASE Expression OF (CaseClause)* (Otherwise)? END => "case"
	   -> READ '(' Name list ',' ')'               	=> "read"
           -> Body
	   ->                                        	=> "<null>";

Otherwise  -> OTHERWISE Statement (';')?		=> "<otherwise>";

CaseClause -> Clause ':' Statement ';'			=> "<case_clause>";

Clause	   -> Primary	   				
	   -> Primary RANGE Primary			=> "<range>";

Expression -> Term
	   -> Term GT Term				=> ">"	                         		
	   -> Term LT Term				=> "<"
	   -> Term GTE Term				=> ">="
	   -> Term NE Term				=> "<>"
	   -> Term EQ Term				=> "="
	   -> Term LTE Term				=> "<=";

Term       -> ModAndMulDiv 
	   -> ModAndMulDiv OR Term			=> "or"
	   -> ModAndMulDiv '+' Term			=> "+"
	   -> ModAndMulDiv '-' Term			=> "-";

ModAndMulDiv-> Unary
	    -> Unary MOD ModAndMulDiv   		=> "mod"
	    -> Unary AND ModAndMulDiv  			=> "and"
	    -> Unary '*' ModAndMulDiv			=> "*"
	    -> Unary '/' ModAndMulDiv			=> "/";
	   
Unary      -> Misc
	   -> NOT Unary 				=> "not"
	   -> '+' Unary
	   -> '-' Unary					=> "neg";

Misc	   -> Primary
	   -> Primary POW Misc				=> "pow";

Primary	   -> Eof					=> "eof"
           -> Name
           -> INTEGER_NUM				=> "<integer>"
	   -> CHARACTER_ALPHA				=> "<char>"
	   -> PRED '(' Expression ')'			=> "pred"
	   -> SUCC '(' Expression ')' 			=> "succ"
	   -> CHR '(' Expression ')' 			=> "chr"
	   -> ORD '(' Expression ')'			=> "ord"
	   -> STR_ALPHA		 			=> "<string>"
           -> '(' Expression ')';

Name       -> IDENTIFIER | CAPIDENTIFIER		=> "<identifier>";


