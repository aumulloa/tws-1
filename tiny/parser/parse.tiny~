%%
Tiny       -> PROGRAM Name ':' Dclns Body Name '.' 	=> "program";
Dclns      -> VAR (Dcln ';')*				=> "dclns"
           -> 					     	=> "dclns";
Dcln       -> Name list ',' ':' Type			=> "dcln";
Type       -> INTEGER 		             		=> "integer"
           -> BOOLEAN				     	=> "boolean";
Body       -> BEGINX Statement list ';' END      	=> "block";
Statement  -> Name ASSIGNMENT Expression          	=> "assign"
           -> OUTPUT '(' Expression list ',' ')'       	=> "output"
           -> IF Expression THEN Statement
                            (ELSE Statement)?       	=> "if"
           -> WHILE Expression DO Statement      	=> "while"
	   -> REPEAT Statement list ';' UNTIL Expression => "repeat"
	   -> LOOP Statement list ';' POOL    		=> "loop"
	   -> EXIT					=> "exit"
	   -> Name EQSWAP Name				=> "<swap>"
	   -> FOR Name ASSIGNMENT Expression TO Expression DO Statement => "<upto>"
	   -> CASE Expression OF (CaseClause)* (Otherwise)? END => "case"
           -> Body
	   ->                                        	=> "<null>";

Otherwise  -> OTHERWISE Statement (';')?		=> "<otherwise>";

CaseClause -> Clause ':' Statement ';'			=> "<case_clause>";

Clause	   -> Primary	   				
	   -> Primary RANGE Primary			=> "<range>";

Expression -> Term
	   -> Term GT Term				=> ">"	                         		
	   -> Term LT Term				=> "<"
	   -> Term GTE Term				=> ">="
	   -> Term NE Term				=> "<>"
	   -> Term EQ Term				=> "="
	   -> Term LTE Term				=> "<=";

Term       -> ModAndMulDiv 
	   -> ModAndMulDiv OR Term			=> "or"
	   -> ModAndMulDiv '+' Term			=> "+"
	   -> ModAndMulDiv '-' Term			=> "-";

ModAndMulDiv-> Unary
	    -> Unary MOD ModAndMulDiv   		=> "mod"
	    -> Unary AND ModAndMulDiv  			=> "and"
	    -> Unary '*' ModAndMulDiv			=> "*"
	    -> Unary '/' ModAndMulDiv			=> "/";
	   
Unary      -> Misc
	   -> NOT Unary 				=> "not"
	   -> '+' Unary
	   -> '-' Unary					=> "neg";

Misc	   -> Primary
	   -> Primary POW Misc				=> "pow";

Primary	   -> READ                                 	=> "read"
	   -> Eof					=> "eof"
           -> Name
	   -> TRUE					=> "<true>"
	   -> FALSE					=> "<false>"
           -> INTEGER_NUM				=> "<integer>"
           -> '(' Expression ')';

Name       -> IDENTIFIER				=> "<identifier>";
